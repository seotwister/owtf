? - 0.16 "shady citizen" alpha release: Dedicated to Michael Kohl (@citizen428) and Bharadwaj Machiraju (@tunnelshade) for contributing to OWTF, thank you!
+ Created an alternative phishing3.2.2_listenerIP SET script directory to use in profiles/general/default.cfg:
  - The point of this is to be able to simply change the PHISHING_SCRIPT_DIR to use when SET adds an additional "ask listener IP" manual step (happens sometimes)
  - If SET stops asking the MSF listener IP then simply change PHISHING_SCRIPT_DIR back to phishing3.2.2 to use the correct scripts
+ Fixed legacy misspelled "phishing" typo bug around a few files
+ Added external links to assist Credential Transport vulnerability exploitation: SSLStrip, Firesheep, CookieCadger
+ Added external link to SpiderLabs' Blogpost: Adding Anti-CRSF support to Burp Intruder
+ Added Skipfish support via a new Skipfish plugin: Skipfish_Unauthenticated
+ Added Arachni v.0.4.1 support
+ Removed demos directory to place demos in a dedicated repository (https://github.com/7a/owtf_demos) and keep the main owtf repository more lightweight
+ Removed releases directory to place demos in a dedicated repository (https://github.com/7a/owtf_releases) and keep the main owtf repository more lightweight
+ Substituted getopt with argparse for argument parsing
+ Fixed www.company.com/subdir issue thanks to Adi Mutu (@an_animal) for reporting it and Bharadwaj Machiraju (@tunnelshade) for fixing it! - https://github.com/7a/owtf/pull/15
+ Fixed bug on draft Inbound proxy thanks to Bharadwaj Machiraju (@tunnelshade) for finding + fixing it! - https://github.com/7a/owtf/pull/16
+ Initial Kali Linux port (some tools still missing, the install script needs more work) thanks to Bharadwaj Machiraju (@tunnelshade) for a lot of help on this!
+ Fixed websecurify path, thanks to Anant Shrivastava (@anantshri) for finding and fixing the problem in a pull request!
+ Kali Linux fix: Removed setrubyenv.sh from default.cfg resource configuration file due to no longer being necessary and because it was stopping execution of ruby tools
+ Improved exception handling in framework/http/requester.py to avoid crashing OWTF for small library things like 'raise BadStatusLine(line)'
+ Kali Linux fix: Fixed DirBuster path and centralised binary name on profiles/general/default.cfg
+ fixed minor pentesting vs. pen testing typo on owtf.py :)
+ Merged new pull request from Bharadwaj Machiraju (@tunnelshade): OWTF restricted dictionary installation and merging scripts thank you!
+ Minor improvements to pull request above after testing (linking raft files instead of copying again) 

24/09/2012 - 0.15 "Brucon" pre-alpha release: Dedicated to Brucon (http://brucon.org), its organisers and attendants
+ Changed name to OWASP OWTF since this is an OWASP project now, thank you OWASP! - https://www.owasp.org/index.php/OWASP_OWTF
+ Bug fix: General clean-up of the bt5_install.sh script + OWTF's tool locations for a smoother install experience, thanks to Xavier Mertens (@xme) for reporting!
+ Bug fix: Removed Slowloris download code from bt5_install.sh script since redistribution was allowed by RSnake and it's packaged with OWASP OWTF
+ Bug fix: Commented out whatweb download from bt5_install.sh since the Backtrack version is now stable, default config also points to Backtrack path now
+ Bug fix: requester.py was referencing "Core.mError" which could sometimes result in the following error: "AttributeError: Core instance has no attribute 'mError'"
+ New feature: Instead of having to use our own nikto binaries, the OWTF's install script will now patch's nikto's poor default user agent (blocked by basic WAF blacklists)
+ Added to Sandro Gauci's Webapp Exploit Payloads to the following external plugins: XSS, CSRF and Cross Site Flashing
+ Added cross-site flashing link to get swfdump from www.swftools.org
+ Added external plugin link to bAdmin project (from whitehat) for default admin interfaces passwords
+ Added xss external plugin link to Gareth's Heyes HackVertor
+ Added xss external plugin link to Mario Heiderich's html5sec.org
+ Changed default UA to a more believable FF15
+ Added udl filetype to blanket google hacking searches (ica and rdp were already there), thanks to Chema Alonso (@chemaalonso)!
+ Added external cross-site flashing link to Adobe's SWFInvestigator
+ Added external xss link to Krzysztof Kotowicz's Chrome extension exploitation framework (XSS ChEF)
+ Added external xss link to Michal Zalewski's post-XSS ideas on XSS exploitation
+ Added external session management schema link to .NET VIEWSTATE vulnerabilities blog post
+ Added external SQLi plugin link to InfoSec Institute's SQLi Backdoor creation article
+ Added external file extension handling + SQLi link to contagiodump.blogspot.com's Collection of Web Backdoors & Shells
+ Added external file extension handling + SQLi link to Laudanum's Project for shells and utilities
+ Added external Bypassing Authentication Schema plugin link to OWASP's Password Storage Cheat Sheet
+ Added external Clickjacking plugin link to OWASP's ClickJacking article
+ Added external Bypassing Authorisation Schema link to OWASP's Access Control Cheat Sheet
+ Added external plugin link to bAdmin project (from whitehat) for default or guessable user accounts plugin
+ Added external plugin link to OWASP's XSS Filter Evasion Cheat Sheet
+ Added external plugin link to OWASP's XSS Prevention Cheat Sheet
+ Added external plugin link to OWASP's DOM XSS Prevention Cheat Sheet
+ Added external plugin link to OWASP's Web Service Security Cheat Sheet
+ Added external plugin link to OWASP's Transport Layer Protection Cheat Sheet
+ Added external plugin link to OWASP's SQL Injection Prevention Cheat Sheet
+ Added external plugin link to OWASP's Query Parameterization Cheat Sheet (complements SQLi cheat sheet)
+ Added external plugin link to OWASP's Session Management Cheat Sheet
+ Added external plugin link to OWASP's Logging Cheat Sheet
+ Added external plugin link to OWASP's JAAS Authentication Cheat Sheet
+ Added external plugin link to OWASP's Forgot Password Cheat Sheet
+ Added external plugin link to OWASP's Cryptographic Storage Cheat Sheet
+ Added external plugin link to OWASP's Cross-Site Request Forgery (CSRF) Prevention Cheat Sheet
+ Added external plugin link to OWASP's Choosing and Using Security Questions Cheat Sheet
+ Added external plugin link to OWASP's Authentication Cheat Sheet

23/04/2012 - 0.14 "London" pre-alpha release: Dedicated to BSides London (http://www.securitybsides.org.uk/), its organisers and attendants
 + Fixed URL regexp on the link_clicker.py payload for the OWTF imap client Agent
   It was missing IP-only URLs like: http://192..., regexp changed to: 'http[:0-9a-zA-Z\.\/]+'
 + Upgraded SET spear phishing scripts from SET version 2.5.3 to SET version 3.2.2
 + Bug fix: Added GetFileAsList and AppendToFile convenience functions (required by some existing code)
 + Added Version information at the bottom of the OWTF banner and arranged some loading messages to suit
 + Added GetCurrentDateTimeAsStr convenience method to the Timer class
 + Added SET script for new payload (19)
 + Replaced /etc/motd by new parameter WORD_TEMPLATE in SET payload script 3, and added parameter to Spear_Phishing plugin
 + Added better error handling to the Spear Phishing handler so that it aborts when a payload script is not found (instead of crashing in SET, after)
 + Fixed SET payload 15 to take advantage of the custom PDF template
 + Added a bit of SET's documentation to the readme directory
 + Commented out the Attachment name modification in the Spear Phishing plugin (sometimes you may want to control this from outside the plugin)
 + Added better exception handling to OWTF's SMTP class so that failure to perform the SMTP Login assumes open relay and moves on (also sent as a patch to SET)
 + Added slightly better message to OWTF's SMTP START TLS exception handling error message
 + Added warning to SET handler when sending blank values
 + Added check to Spear Phishing module to verify the word template exists
 + Improved exception handling on the SMTP class for Targeted Phishing, thanks Sam!  

10/04/2012 - 0.13b "HackPra" pre-alpha release: Dedicated to HackPra (http://www.nds.rub.de/teaching/hackpra/), its organisers and attendants
 + Inclusion of slowloris, thanks to RSNake for allowing redistribution!
 + More indentation clean up in various files
 + Fixed bug on DeriveURLSettings: Thanks to Sandro Gauci for reporting! 
   The home-brew parsing was resulting in an error like below with URLs like http://example.com:81 
   "Aborted by Framework: Cannot resolve Hostname: example.com:81"
   URL parsing is now done via the urlparse library
 + Fixed bug introduced above whereby urlparse was returning "None" for the port in the summary report:
   Reintroduced scheme check to handle this case and ensure the port is never blank regardless of URL format
 + Fixed bug similar to the one in DeriveURLSettings on the OWTF Core:
   IsInScopeURL was parsing the hostname from the URL in a home-brew fashion this worked ok most of the time
   but in some cases could lead to bugs, core.py is now using urlparse for parsing the hostname from the URL
 + Added regression test shell scripts to tests directory

25/03/2012 - 0.13 "Trooper" pre-alpha release: Dedicated to Troopers (http://www.troopers.de/), its organisers and attendants
 + Inclusion of fuzzdb -allowed by licence- thanks!
 + Inclusion of HashCollision-DOS-POC by Christian Mehlmauer (@_FireFart_) thanks!
   Location: owtf_dir/tools/dos/web/HashCollision-DOS-POC
   More info: https://github.com/FireFart/HashCollision-DOS-POC
 + Installation script cleanup: tools/bt5_install.sh courtesy of Michael Kohl (@citizen428), thanks!
 + Minor fixes to scripts/setrubyenv.sh also courtesy of Michael Kohl @citizen428), thanks!
 + "set fuzzFormComboValues all" removed from scripts/run_w3af.sh because it may make w3af scans slow, thanks to Adi Mutu (am06) and Andrés Riancho (@w3af)!
   More info: http://sourceforge.net/mailarchive/forum.php?thread_name=CA%2B1Rt67bN3-2OpB%2B7SOGO7%3D92KWXBMdbaztpa885f%3Du2GzjcFg%40mail.gmail.com&forum_name=w3af-users
 + Created an initial basic targeted phishing plugin to send anything via SMTP: aux/se/Targeted_Phishing@OWTF-ASEP-002.py
 + Created the concept of "OWTF Agents": Small listeners that establish communication channels that allow to perform actions remotely (i.e. in a victim machine)
   - Added sbd-based shared-password OWTF Agent for persistent shell access to other machines to be used during a test (i.e. victim emulation)
   - Added ssh-based trusted-public-key OWTF Agent for an alternative to shared passwords (basic instructions to set this up with ssh)
   - Added initial auxiliary plugins to communicate with OWTF agents:
 	  SBD_CommandChainer is working, the others in rce are WIP (see plugins/aux/rce)
   - Added imapd OWTF agent: This checks email with a predefined account and loads the configured plugin to process the message.
       Example: 
       1) OWTF sends a targeted phishing attack via aux/se/Targeted_Phishing@OWTF-ASEP-002.py
       2) An OWTF imapd Agent processes any new email that arrives and emulates a user click for all links found in the message
 + Added initial SMB handler to the framework and a related plugin: aux/smb/SMB_Handler@OWTF-SMB-001.py
 + Added an Interactive Shell handler useful to interact with remote and local shells run in a subprocess
 + Significant SET integration improvements: new OWTF SET handler + spear_phishing modules and plugin/configurability tweaks 
 + Added hopefully better comments in several places
 + Started to use Eclipse and Fixed indentation on many framework files :P
 + Bug fix: Commented out goohost shell one liners in profiles/general/default.cfg: When goohost is not installed cat hangs (Thanks to Sandro Gauci)
 + Bug fix: Grep plugins were no longer showing links to Text, HTML, etc findings
 + Added CAPTCHA breaker tool links to external plugin to assist manual exploitation: PWNtcha - captcha decoder, Captcha Breaker
 + Added vulnerability search box to the CAPTCHA external plugin
 + Added links to the "Session managament schema" external plugin: Gareth Hayes' HackVertor, Raul Siles' (Taddong) F5 BIG IP Cookie Decoder
 + Added link to the "SSI Injection" external plugin: webappsec.org SSI Injection info
 + Moved HTTP-Traceroute back into rev_proxy to avoid config changes

10/02/2012 - 0.12 "Wicky" pre-alpha release: Dedicated to @marcwickenden for sending the first pull request!
 + Merged pull request with IPv6 support and proper IP validation from @marcwickenden thanks!
 + Added graceful framework abort when a hostname cannot be resolved (instead of python trace mess)
 + Added Hurricane Electric passive recon link to discovery plugin (Thanks to Chris John Riley)
 + Bug fix in plugin_handler.py and plugin_register.py to set a Start, RunTime and End date for external plugins that have been already run but require to be registered against a target to report display purposes. Only happened in separate iterations.
 + Added a Sanitiser module to solve the "embedding untrusted HTML" issue, when POST is the only way to query a third party site. The filter is public and you are encouraged to break it :). An improved filter will be published shortly after each new public bypass. 
   REMARKS: 
   - Thank you very much to everybody that took the time to try to break the HTML filter!
   - Congratulations + props to the successful breakers before this release: Mario Heiderich, @notracecc, @dreyercito
   - If you did not try to break the filter, what are you waiting for? :)
   - The challenge will run indefinitely and is available here: http://blog.7-a.org/2012/01/embedding-untrusted-html-xss-challenge.html
 + Clean-up of passive robots.txt plugin to sanitise embedded HTML (via module above) + move this to an external file
 + plugin_helper.py clean-up for flexibility, readability and code reuse around transparent filtering and sandboxing of embedded third-party HTML (related to above)
 + When embedding HTML from a third party site OWTF will:
     1) Filter the HTML using the Sanitiser module above
     2) Save the filtered output to a file
     3) Create a separate file that embeds the filtered output inside a sanboxed iframe (just in case an unpublished bypass whatever ;))
     4) The OWTF report provides a link to the sanboxed file only
     5) Both the sandboxed + non-sandboxed files are saved to another directory = they cannot access HTML 5 localstorage (where your review is), at least in Firefox 8
 + Fixed minor but annoying bug whereby the filter was not showing up when the detailed report was collapsed, so detailed report totals were not being shown
 + Added a more links to assist manual XSS exploitation: http://www.bindshell.net/tools/beef, http://xss-proxy.sourceforge.net/, http://www.gnucitizen.org/projects/backframe/
 + Integration with CKEditor (http://ckeditor.com/):
   1) Notes now have a full blown WYSIWYG editor -their permissive licensing allows redistribution, thank you!-
   2) Above means you can now take notes with fancy formatting: tables, links, bullet points, font format, size, style, etc (useful for exploit/PoC links, etc)
   3) The OWTF review works as usual but the notes are now saved with their formatting (HTML instead of plain text)
   4) OWTF will show an automated preview on top of the editor, this is always displayed, which makes it more intuitive to see if there are notes present for a plugin
   5) OWTF will also automatically save these formatted notes in the review for resilience: Even if your browser crashes or is closed by mistake you keep what you typed
   6) The OWTF notes preview also modify links so that they are displayed on a new tab (most useful option and consistent with other links in the report)
   7) OWTF will create/destroy CKEditor instances as follows: 1st lightbulb click: create, 2nd click: destroy = report is more lightweight, loads faster, etc
   8) OWTF will destroy all plugin editors when a new one is created: This ensures only resources for a single editor are used at any point in time (report = lightweight)
 + Bug fix: Changing the detailed report iframe size via onload event was messy: Now the iframe is created directly using the initial height defined on: COLLAPSED_REPORT_SIZE
 + Enhancement: Added new review icons to be able to flag certain special cases. Icons can be removed on: profiles/general/default.cfg
   1) LadyBug: Flag functional and/or business logic bugs (it's up to you how you interpret this, as usual)
   2) Empty Star: To flag you had a brief look (already saw it) but no real analysis was done
   3) Half Star: To flag you had an initial look but need to investigate more to be able to rate the output
 + Created an initial help file that is linked to from the OWTF report via question mark icons
 + Some clean-up around review icons code in the report a bit less messy now :P
 + Plugin Review Icons are now highlighted like filters when the user clicks on them as well as when the report loads: More intuitive
 + Multiple bug fixes around Import/Export Review from Summary report (Import was not working at all and other similar problems)
 + Multiple space and colour optimisations in the report
 + An initial Summary Report filter has been implemented, this triggers the same filter on all children iframes, resizing them, etc
 + Added unit tests to allow more efficient testing of the Sanitiser module (i.e. test quickly all previous bypasses against new filter)
 + Made the Sanitiser module a bit smarter so that:
     1) It can be called from the framework: When this happens no tests are run, but all functionality is callable by the framework
     2) It can be called from the commandline: When this happens the Sanitiser expects HTML on stdin (i.e. cat input.txt | sanitiser.py)
     NOTE: I noticed it was handier to read from stdin (instead of a hard-coded file) so that I can regression test new filters faster
 + Significant report memory usage improvements (single review object shared for all reports, it was num_targets x review + 1 before)
 + Significant report performance improvements:
     1) When the report loads for the first time, counters and colours are calculated and stored in localstorage
     2) Counters will only be updated when the user rates plugins from then on
     3) When the report loads again counters are not calculated (as previously= this was slow), instead they are read from localStorage
 + Lots of small report tweaks to improve navigability, general usability and appearance
 + Added rudimentary reporting functionality via magic bar: Builds a basic report for ease of copy-paste in your reporting
 + Refactored owtf.js into smaller files: owtf_general.js, owtf_review.js, owtf_filter.js and owtf_reporting.js
 + Reorganised dictionaries and tools into "restricted" (i.e. licensing) directories so that they are not committed by mistake to github

19/01/2012 - 0.11 "Vienna" pre-alpha release: Dedicated with special love to BSides Vienna (http://www.bsidesvienna.info/), its organisers and attendants
 + Significant report improvements
 + OWTF will now only execute external plugins once regardless of the number of targets (it was 1 x num_targets before, way slower)
 + Host names are now retrieved properly from python via import socket + socket.gethostbyname -> i.e. cannot use dns/host when /etc/hosts is required in a pen test (Bug report credit: Sandro Gauci)
 + Fixed licence to more accurately match 3-clause-BSD (the intended licence :))
 + Created initial FAQ based on actual feedback/questions
 + Added new grep + external plugins for HTML5 Cross Origin Resource Sharing (CORS) (OWTF-WGP-002) - Thanks to Krzyzstof Kotowicz for answering my questions + great PoCs :)
 + Added links to interesting resources for manual exploitation, etc on the external CORS plugin (Thanks to Krzysztof Kotowicz)
 + Added links to interesting resources for manual exploitation, etc on the external Cross Site Flashing plugin (Thanks to Krzysztof Kotowicz, Michele Orru, Mario Heiderich)
 + Tweaked cross site flashing passive plugin (google hacking searches) to also search for Silverlight's stuff: clientaccesspolicy.xml, .xap and .scr files 
 + Tweaked cross site flashing semi passive plugin to also try to get the clientaccesspolicy.xml file (Silverlight's equivalent to crossdomain.xml)
 + Tweaked regexps for Application Configuration Management (OWASP-CM-004) to reduce false positives
 + Added regexps to Application Configuration Management (OWASP-CM-004) to search for PHP+ASP source code disclosure too
 + Added resources (Nicolas Gregoire's XLT wiki) to XML Injection external plugin (to assist with manual exploitation)
 + Added Nicolas Gregoire's HTTP-Traceroute.py reverse proxy check script to tools/discovery/web/rev_proxy (Thanks to Nicolas for allowing direct redistribution with OWTF!)
   Added a GET and TRACE reverse proxy checks using HTTP-Traceroute.py to: Infrastructure Configuration Management (OWASP-CM-003) - with WAF and Load Balancer checks - 
   Link for background: http://www.agarri.fr/kom/archives/2011/11/12/traceroute-like_http_scanner/index.html
 + Bug fix: owtf.py -l net (also owtf.py -g net) would crash because there are no net plugins yet: An error message explaining this is now shown instead (Bug report credit: am06, Michele Orru)
 + Bug fix: semi_passive/Testing_for_Cross_site_flashing@OWASP-DV-004.py does no longer show duplicates + minor plugin clean-up
 + Bug fix: Fixed some issues on Transaction DB comparisons that resulted in the Cache not working right
 + Modified web/passive/Spiders_Robots_and_Crawlers\@OWASP-IG-001.py to directly submit the form on tool.motoricerca.info (because it does not work via link, uses POST only)
 + Added Start, End and Runtime fields to Plugin Register + Modified report to display the Start + End Date/Time for each plugin (potentially useful to correlate log events)
 + Added http://statsie.com passive analysis link (on Passive Search Engine Discovery)
 + Created a configuration health-check module by massive popular demand :). When OWTF starts it will now warn you when tools are missing and suggest how to fix it.
 + Created initial rudimentary owtf_dir/tools/bt5_install.sh script (incomplete, but getting there) to download tools missing or unreliable in Backtrack 5
 + Updated install script (owtf_dir/install/bt5_install.sh) + /profiles/general/default.cfg to include the latest Arachni version (v0.4.0.2) and verified it works
 + Experimental: Created a Command Register (owtf_review/db/command_register.txt) where information on all commands run is stored:
   - Start+End Date/Time, Runtime, Status (Finished/Cancelled), Actual command run, Command without plugin output info (needed internally for the framework)
   - Purpose 1: Avoid running the same command several times, very useful when you have several domain.com targets. A message like "command already run for target X" appears
   - Purpose 2: Simple date and time correlation becomes possible: Useful for debugging and IDS testing (which exploit worked? what command brought the server down?, etc)
   - Purpose 3: It is simply nice to have a log of every command that was run, and questions like "what tools did you run and how?" become easier to answer
 + Added link to Gareth Heyes' awesome http://shazzer.co.uk project to assist with manual XSS exploitation
 + Added Command execution start date/time information on the screen so that the pen tester can make a better decision (wait/stop it)
 + Experimental: Created a redirect detection mechanism so that it is more intuitive to realise when all URLs are being redirected (i.e. blanket redirect from port 80 to 443)
   - Status will be marked as "302 Found": Instead of the previous "200 OK", which did not reflect the redirect (not ideal but better than 200)
   - URL will be set as the redirected URL: This way it is more obvious if the target is http:// but the transaction log is all https://, that there is a blanket redirect
   - Known issue: The scope can be wrong if the redirect is performed to outside of the target URL, need to work more on this

 + Experimental: If the user supplies only domain names, the scope expands to https + http for each domain
 + Experimental: If a passed URL cannot be reached it is removed from the report (assumed it does not exist) -> useful for huge scopes!

06/01/2012 - 0.10 "Berlin" pre-alpha release dedicated to BerlinSides (http://berlinsides.org/), its organisers and attendants
 + Thanks to Mario Heiderich for the sample attack vectors and Selenium research for IDS testing (used by the selenium aux plugin)
 + Passive Plugins will now be run even if the target IP is internal because passive plugins now also make suggestions (i.e. potentially useful commands)
 + Changed blue navigation arrows to + and - gray icons courtesy of http://www.app-bits.com/free-icons.html. plus/minus suggested as more intuitive (Idea Credit: Sandro Gauci)
 + Changed text color to be darker for higher contrast and easier reading :) (Idea Credit: Sandro Gauci)
 + Implemented dynamic counters beside each filter for a quick visual overview and know where data is (with colours too :)) + All icons are now configurable
 + Bug fix: Comments where not being populated back upon screen reload
 + Removed matches table (redundant now because of the counters) and added mechanism to highlight enabled filter icon with blue background: More intuitive, I think
 + Several UI rearrangements to improve navigation and intuitiveness
 + Implemented new CLI option for algorithm: breadth (default): runs each plugin against all targets first. And depth runs all plugins against each target first
 + Massive refactoring/rewrite of significant portions of the framework to support: algorithm, multi-host targets, future net plugins, etc
 + Changed Config to transparently handle multi-target configurations (i.e. self.Core.Config.Get('x') --> 'x' is relevant for the current target)
 + Changed Config to transparently handle multi-target replacements (i.e. self.Core.Config.GetReplacementDict() --> Returns PLACE_HOLDER => VALUE pairs relevant for target)
 + Serious refactoring to dynamically load plugins and plugin types from the file system along with a description of what they do
 + Significant DB refactoring to accomodate to the new multi-host/multi-db problem, created plugin register db and improved DB simulation mode without touching disk
 + Bug fix: New Plugin highlighting upon screen refresh is now working again
 + robots.txt analysis: Added resource: http://tool.motoricerca.info/robots-checker.phtml + changed proxy from hexilion to anonymouse.org + passive robots.txt plugin clean-up
 + Bug fix: Fixed an issue that resulted in many broken report links
 + Significant reporting improvements, including Summary report counters working, etc
 + Transaction Log DB handling improvements and clean up
 + Added "external" plugins so that the pen tester has a way to write down information relevant to external tools and/or manual testing. Will have helpful info in the future.
 + Added initial SSI grep plugin
 + Added OWASP Codes to the detailed report
 + Many more bugs were also fixed ..

01/12/2011 - 0.07 pre-alpha release
 + Fixed bug in spider plugin: Counter incorrect
 + Cache Control Meta tags search added to grep plugin: Logout and Browser Cache Management (OWASP-AT-007)
 + New plugins: autocomplete, cross site flashing
 + Report navigation improved
 + Added option to "Mark as Reviewed", "Mark as NOT Reviewed", "Clear Review", "Clear Review Storage" for more efficient review
 + Reviewed items are stricken-through, so it's easy to see what has not been reviewed yet
 + New plugin results are highlighted in white blackground, so that it is easy for the tester to identify what's new
 + Made seed shorter and flipped top table to be horizontal and take a lot less space off the screen
 + To the right of OWASP Index Item: Removed toggle + moved "show" and "hide" beside plugin tabs, refactor into tabcreator
 + Added basic CSRF grep plugin that looks for hidden fields (in the hope that token will/will not be found)
 + Added basic SQLi google-hacking passive plugin
 + Added DoS grep plugin (show top 10 slowest queries and suggest to view log)
 + Cleared up the HTTP Transactions table: Removed redundant links + Added link to transaction log
 + Added new plugin for Credentials_transport_over_an_encrypted_channel
 + Lots of UI improvements to use screen space better: Now Review, History, Logs, etc have their own tabs
 + Tried to use cool jquery icons but failed miserably: They are displayed but background sucks need a web designer :)
 + Had the bright idea of changing the naming convention, which broke everything for 1day+
 + Bug fix: All URLs where being logged instead of only the valid ones
 + Bug fix: DoS testing was taking into account transactions out of scope
 + Bug fix: DoS plugin (and DB transaction manager) crashed when transaction DB empty
 + Moved DirBuster to its own plugin: Old, Backup and Unreferenced Files (OWASP-CM-006)
 + Moved each scanner to its own plugin for ease of review and flexibility (i.e. I want to run X but not Y, etc): arachni, wapiti, w3af, etc now have their own plugins
 + Bug fix: Added check on plugin handler so that grep plugins are skipped when Transaction DB is empty (Grep plugins grep the DB so no DB = fail)
 + Bug fix: Vuln search box was broken due to jquery port changes
 + Added check so that passive plugins are not run if the target ip is an RFC1918 address (aka "private" or "LAN" address)
 + Added passive Testing for Admin Interfaces (OWASP-CM-007)
 + Split URL DB into "potential URL" (maybe third-party tool false positive) and "URL" (vetted) DBs -> potential URLs to be checked by spider plugins
 + Improved Extract URLs mechanism to Visit links (adding to DB, which helps grep plugins) if >= 1 active plugin enabled + associated bugfixes, UI and timing improvements
 + Improved log UI to indicate if there are error messages or not without having to click the button + Significant Log UI navigation improvements
 + Implemented persistence via localStorage, serious JavaScript refactoring: Now there is a single Review JSON object, code simplified a lot
 + Made the choice between localStorage and sessvars configurable so that the user can choose and use some form of persistance (sessvars) even on old browsers.
 + Because of above 2 lines the Storage has been abstracted into separate libraries: the abstraction (sessvars or localStorage) is loaded depending on configuration setting
 + Implemented ability to add notes to the results of each plugin, this is saved in the JavaScript storage as well
 + Added a Filter tab at the top that includes the icons available to review each plugin and allows filtering by flag, by comments present, striken-through, etc
 + Fixed lots of bugs in filter above, added "review size" and "total size" columns to top table for visibility of memory in use, the columns are updated on the fly
 + Added a hidden token div inside plugin reports so that the report can detect whether a plugin's content has changed or not: If changed highlight tab background to white
 + Added a counter to the filter so that the user has visibility about how many plugins matched the filter (handy to find bugs too)
 + Made rating flags configurable: the user can now choose which flag icons they wish to view on the screen (i.e. only low, medium and high icons, etc)
 + Added a new Grep plugin based on URL classification for "Old Backup and Unreferenced Files (OWASP-CM-006)"
 + Bug fix: the grep plugin for "Old Backup and Unreferenced Files (OWASP-CM-006)" was showing URLs with 404 responses
 + Bug fix: Solved a storage capacity calculation issue when sessvars was chosen as the JavaScript storage
 + Installed the latest stable whatweb version, which fixed some issues after updating BT5 R1
 + Enabled filter on load: Refreshing the report will now 1) Click on the Filter tab + 2) Click on the "show completed plugins only" filter => Showing only available info
 + Bug fix: The unique html counter db was being corrupted under special circumstances (6+ multi-runs)
 + Moved suggested commands from active fingerprint to passive: They are only suggested. Also created powerful primitive to suggest commands more efficiently
 + Bug fix: Spider was using the previous DB instead of the one for scraped/potential URLs
 + Bug fix/Enhancement: Serious improvements to CMS Explorer import dictionaries script: Dictionaries are now converted into DirBuster format and CMS-specific
 + After above, created new configuration lines for CMS-specific dictionaries: all, wordpress all, wordpress plugins, etc from the DirBuster format import (thx CMS Explorer).

18/11/2011 - 0.04 pre-alpha release - Lots of improvements, widely unpublished
 + Re-architecture to simplify code a bit more (general clean-up)
 + Lots of bug fixes
 + Implemented (hopefully) robust error/exception handling that facilitates bug reporting and tries to save as much partial data as possible for the user when a crash happens
 + Implemented new HTTP method support in reporter module (HEAD, OPTIONS, TRACE, DEBUG and PUT -PUT still buggy-)
 + Improved DB format and implemented a few caching functions to speed the framework
 + Implemented naming convention to distinguish scope from external DB transactions
 + Implemented logging of transaction parts separately as well as in full: 4 files saved per transaction -> full, request, resp. headers and resp. body
 + Created new Reporting functions to show Transactions as tables easily from plugins (reporter.py: DrawHTTPTransactionTable and relatives)
 + Created new mRandom module to build random strings on the fly
 + Centralised helper functions into a single library called general.py (will consider separating when there are more functions)
 + Improved Transaction log and main report significantly and started to customise CSS a bit
 + Main config.cfg split into framework_config.cfg and user_config.cfg to keep settings separate, the framework loads all settings on the Config object
 + Added outbound proxy support for owtf requests only and a proxy check on start-up
 + Serious refactoring of database and related fixes elsewhere in the framework: Now broken down into: db, url_manager, transaction_manager and run_manager
 + Moved plugin_handler and plugin_helper into a plugin module (aka "directory")
 + Significant improvements in Header Analysis and Reporting
 + Lots of error handling bug fixes
 + Moved transaction.py and requester.py into a http module (aka "directory")
 + Added handy links section to report at the top: OWASP Testing Guide, CVSS advanced calculator, Hackvertor, etc
 + Changed grep plugin behaviour: Grep plugins will automatically be run after semi_passive and then again after active plugins run + always overwritten
 + Built reusable response pattern matching primitives
 + Fixed nasty run DB data corruption bug (only happened on the first 2 runs)
 + Added autocomplete plugin that looks for password fields

01/11/2011 - 0.01 pre-alpha release - Basic proof of concept, widely unpublished :)
